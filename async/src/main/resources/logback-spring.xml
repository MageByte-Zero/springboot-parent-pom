<?xml version="1.0" encoding="UTF-8"?>

<!-- scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
 -->
<configuration scan="true" scanPeriod="60 seconds">

	<property resource="application.yaml" />

	<!-- 日志输出格式 -->
	<property name="logPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5p] [%t] - %logger-%line %msg %n" />

	<!-- scope=context：该属性在本配置内使用有效，source为在application.properties中定义的信息，defaultValue为默认值 -->
	<springProperty name="logPath" source="log.path" defaultValue="logs" />
	<springProperty name="logName" source="spring.application.name" defaultValue="lls-log" />

	<!-- 控制台输出 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${logPattern}</pattern>
			<charset>utf8</charset>
		</encoder>
	</appender>

	<!-- 输出大于等于配置级别的日志到指定stdout.log文件-->
	<appender name="allAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${logPattern}</pattern>
			<charset>utf8</charset>
		</encoder>
		<!-- 日志文件名称 -->
		<file>${logPath}/${logName}/${logName}-stdout.log</file>
		<!-- 每天生成日志文件，文件大小超过200M则新生成一个文件，文件保存最长30天 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/backup/${logName}/${logName}-stdout.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
			<!-- 日志文件保存日期最长为30天 -->
			<MaxHistory>30</MaxHistory>
			<!-- 日志文件最大为200MB -->
			<maxFileSize>200MB</maxFileSize>
		</rollingPolicy>
	</appender>

	<!-- 输出info级别日志到指定info.log文件-->
	<appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${logPattern}</pattern>
			<charset>utf8</charset>
		</encoder>
		<file>${logPath}/${logName}/${logName}-info.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/backup/${logName}/${logName}-info.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
			<MaxHistory>30</MaxHistory>
			<maxFileSize>200MB</maxFileSize>
		</rollingPolicy>
		<!-- 过滤器，可以过滤掉不符合条件的日志，INFO级别的日志被处理，其它的拒绝 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 输出warn级别日志到指定warn.log文件-->
	<appender name="warnAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${logPattern}</pattern>
			<charset>utf8</charset>
		</encoder>
		<file>${logPath}/${logName}/${logName}-warn.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/backup/${logName}/${logName}-warn.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
			<MaxHistory>30</MaxHistory>
			<maxFileSize>200MB</maxFileSize>
		</rollingPolicy>
		<!-- 过滤器，可以过滤掉不符合条件的日志，WARN级别的日志被处理，其它的拒绝 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 输出error级别日志到指定error.log文件-->
	<appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>${logPattern}</pattern>
			<charset>utf8</charset>
		</encoder>
		<file>${logPath}/${logName}/${logName}-error.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/backup/${logName}/${logName}-error.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
			<MaxHistory>30</MaxHistory>
			<maxFileSize>200MB</maxFileSize>
		</rollingPolicy>
		<!-- 过滤器，可以过滤掉不符合条件的日志，ERROR级别的日志被处理，其它的拒绝 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>



	<root level="INFO">
		<appender-ref ref="stdout" />
		<appender-ref ref="allAppender" />
		<appender-ref ref="infoAppender" />
		<appender-ref ref="warnAppender" />
		<appender-ref ref="errorAppender" />
	</root>

</configuration>